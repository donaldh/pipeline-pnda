##############################################
# Global bits of config in the default section
#
[default]

id = pipeline

##############################################
# Example of a TCP dialout (router connects to pipeline over TCP)
#
[testbed]
stage = xport_input

# Module type, the type dictates the rest of the options in the section.
# TCP can only be used as xport_iinput currently. UDP works similarly.
#
type = tcp

# Supported encapsulation is 'st' for streaming telemetry header. This
# is the header used to carry streaming telemetry payload in TCP and UDP.
#
encap = st

# TCP option dictating which binding to listen on. Can be a host name
# or address and port, or just port.
#
listen = :57500

# To enable dumping data as it is rxed, uncomment the following, and
# run with --debug option.
#
# logdata = on

# It is also possible to turn on TCP keepalives. Setting keepalive to
# 0 (default) stops pipeline from explicitly turning on
# keepalives. Otherwise, keepalive is turned on with period.  TCP
# Keepalives do NOT need any special explicit configuration or support
# from the other end.
#
# keepalive_seconds = 0


##############################################
# Example of a tap stage; dump content to file, or at least count messages
#
[inspector]
stage = xport_output

# Module type: tap is only supported in xport_output stage currently.
#
type = tap

# File to dump decoded messages
#
file = /data/dump.txt

# encoding = json
#
# Options: json_events | gpb, gpb_kv. If format is a binary format, or
# not supported for input encoding in use (gpb if proto is available,
# gpbk/v or JSON), we fall back to hex. Default is JSON
#

# raw = true
#
# If raw is set to true, no encoding should be specified. The outcome
# is that raw payload is dumped on top of a streaming telemetry
# header. The resulting archive can be replayed (i.e. reread and fed
# to output stages) by pipeline using the 'replay' input module.
#

# The optional buffered channel depth used to accommodate transient
# producer/consumer throughput.
#
datachanneldepth = 1000

# If all we want to do is count frames, set countonly to true
#
# countonly = false

